# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'editor_model.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json
import logging
import os
import time
import math
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QSize, Qt
from PyQt5.QtGui import QPixmap, QPen, QPainter, QCursor
from PyQt5.QtWidgets import QWidget, QSlider, QMessageBox


class Ui_Form(QWidget):
    def setupUi(self, Form):

        Form.setObjectName("Form")
        Form.resize(1085, 706)
        Form.setMinimumSize(QtCore.QSize(1085, 706))
        Form.setMaximumSize(QtCore.QSize(1085, 706))

        self.load_model_button = QtWidgets.QPushButton(Form)
        self.load_model_button.setGeometry(QtCore.QRect(840, 90, 171, 51))
        self.load_model_button.setObjectName("load_model_button")
        self.load_model_button.clicked.connect(self.load_model)

        self.save_button = QtWidgets.QPushButton(Form)
        self.save_button.setGeometry(QtCore.QRect(840, 270, 171, 51))
        self.save_button.setObjectName("save_button")
        self.save_button.clicked.connect(self.save_point_json)

        self.frame = QtWidgets.QFrame(Form)
        self.frame.setGeometry(QtCore.QRect(10, 10, 771, 691))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.line = QtWidgets.QFrame(self.frame)
        self.line.setGeometry(QtCore.QRect(80, 60, 20, 531))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.frame)
        self.line_2.setGeometry(QtCore.QRect(650, 60, 20, 531))
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(self.frame)
        self.line_3.setGeometry(QtCore.QRect(90, 580, 571, 16))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.line_4 = QtWidgets.QFrame(self.frame)
        self.line_4.setGeometry(QtCore.QRect(90, 60, 571, 16))
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.comboBox = QtWidgets.QComboBox(Form)
        self.comboBox.setGeometry(QtCore.QRect(810, 30, 231, 22))
        self.comboBox.setObjectName("comboBox")
        self.reset_button = QtWidgets.QPushButton(Form)
        self.reset_button.setGeometry(QtCore.QRect(840, 180, 171, 51))
        self.reset_button.setObjectName("reset_button")
        self.reset_button.clicked.connect(self.reset_model)

        self.return_index_button = QtWidgets.QPushButton(Form)
        self.return_index_button.setGeometry(QtCore.QRect(840, 360, 171, 51))
        self.return_index_button.setObjectName("return_index_button")

        self.horizontalSlider = QtWidgets.QSlider(Form)
        self.horizontalSlider.setGeometry(QtCore.QRect(800, 470, 251, 16))
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalSlider.setMinimum(0)
        self.horizontalSlider.setSingleStep(1)
        self.horizontalSlider.setTickPosition(QSlider.TicksBothSides)
        self.horizontalSlider.valueChanged.connect(self.point_change_show)

        self.add_pointer_button = QtWidgets.QPushButton(Form)
        self.add_pointer_button.setGeometry(QtCore.QRect(840, 510, 171, 51))
        self.add_pointer_button.setObjectName("add_pointer_button")
        self.add_pointer_button.clicked.connect(self.add_point)

        self.delete_pointer_button = QtWidgets.QPushButton(Form)
        self.delete_pointer_button.setGeometry(QtCore.QRect(840, 590, 171, 51))
        self.delete_pointer_button.setObjectName("delete_pointer_button")
        self.delete_pointer_button.clicked.connect(self.delete_point)

        self.save_dir = os.path.join(
            os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "var",
            "model")
        self.model_map = {}
        self.H = 771
        self.L = 691
        self.__size = QSize(self.L, self.H)
        # 新建QPixmap作为画板，尺寸为__size
        self.__board = QPixmap(self.__size)
        # self.__board = QPixmap()
        self.__board.fill(Qt.white)  # 用白色填充画板
        self.painter = QPainter()
        self.setMouseTracking(True)
        self.frame.setMouseTracking(True)
        self.slider_point = None
        self.model_name = ""

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        # pixmap = QPixmap('笔绘图笔尖.png')
        # new_pixmap = pixmap.scaled(30, 30)
        # cursor = QCursor(new_pixmap, 0, 0)
        # Form.setCursor(cursor)
        self.load_model_button.setText(_translate("Form", "载入模型"))
        self.save_button.setText(_translate("Form", "保存作品"))
        self.add_pointer_button.setText(_translate("Form", "添加打点"))
        self.delete_pointer_button.setText(_translate("Form", "删除打点"))
        self.reset_button.setText(_translate("Form", "重置打点"))
        self.return_index_button.setText(_translate("Form", "返回首页"))

    def _load_default(self):
        try:
            _translate = QtCore.QCoreApplication.translate
            self.comboBox.clear()
            self.comboBox.clearEditText()
            for root, _, files in os.walk(self.save_dir):
                for file in files:
                    full_path = os.path.join(root, file)
                    model_name = file.rstrip(".json")
                    self.comboBox.addItem("")
                    self.comboBox.setItemText(
                        files.index(file),
                        _translate("Form", model_name)
                    )
                    if model_name not in self.model_map.keys():
                        self.model_map[model_name] = full_path
        except Exception as e:
            logging.exception(e)

    def change_prompt(self, prompt_value):
        if "1" == prompt_value:
            self.line.setGeometry(QtCore.QRect(10, 10, 20, 650))
            self.line_2.setGeometry(QtCore.QRect(750, 10, 20, 650))
            self.line_3.setGeometry(QtCore.QRect(10, 580, 760, 150))
            self.line_4.setGeometry(QtCore.QRect(10, -55, 760, 150))
        elif "2" == prompt_value:
            self.line.setGeometry(QtCore.QRect(40, 30, 20, 600))
            self.line_2.setGeometry(QtCore.QRect(700, 30, 20, 600))
            self.line_3.setGeometry(QtCore.QRect(40, 550, 680, 150))
            self.line_4.setGeometry(QtCore.QRect(40, -35, 680, 150))
        elif "3" == prompt_value:
            self.line.setGeometry(QtCore.QRect(80, 60, 20, 531))
            self.line_2.setGeometry(QtCore.QRect(650, 60, 20, 531))
            self.line_3.setGeometry(QtCore.QRect(80, 580, 590, 10))
            self.line_4.setGeometry(QtCore.QRect(80, 60, 590, 20))
        elif "4" == prompt_value:
            self.line.setGeometry(QtCore.QRect(110, 90, 20, 480))
            self.line_2.setGeometry(QtCore.QRect(600, 90, 20, 480))
            self.line_3.setGeometry(QtCore.QRect(105, 520, 520, 70))
            self.line_4.setGeometry(QtCore.QRect(105, 70, 520, 70))
        elif "5" == prompt_value:
            self.line.setGeometry(QtCore.QRect(140, 120, 20, 430))
            self.line_2.setGeometry(QtCore.QRect(550, 120, 20, 430))
            self.line_3.setGeometry(QtCore.QRect(130, 500, 450, 70))
            self.line_4.setGeometry(QtCore.QRect(130, 100, 450, 70))
        else:
            pass

    def save_point_json(self):
        src_file_name = os.path.basename(self.model_map[self.model_name])
        if "-" in src_file_name:
            file_prefix = src_file_name.split("-")[0]
            new_file_name = \
                "%s-%s.json" % (
                    file_prefix,
                    time.strftime('%Y%m%d%H%M%S', time.localtime(time.time()))
                )
            save_point_file_path = \
                os.path.join(
                    os.path.dirname(
                        self.model_map[self.model_name]
                    ),
                    new_file_name
                )
        else:
            save_point_file_path = \
                self.model_map[self.model_name].replace(
                    ".json",
                    "-%s.json" %
                    time.strftime('%Y%m%d%H%M%S', time.localtime(time.time()))
                )
        with open(save_point_file_path, "w") as f:
            f.write(json.dumps(self.model_json))

        QMessageBox.information(
            self,
            '保存成功！',
            '保存修改成功，保存路径为\n%s' % save_point_file_path
        )
        self._load_default()

    def point_change_show(self):
        try:
            self.update_load_model()
            self.painter.begin(self.__board)
            self.painter.setPen(
                QPen(QtCore.Qt.green, 10, Qt.SolidLine)
            )
            slider_value_list = \
                self.slider_point_show_list[
                    self.horizontalSlider.value()
                ].split("-")
            current_point = \
                [int(slider_value_list[2]), int(slider_value_list[3])]
            if "press_point_map" == slider_value_list[0]:

                if current_point in self.model_json[
                    "practise_press_point_map"][slider_value_list[1]]:
                    print(self.practise_point_count_map[
                              "practise_press_point_map"][
                              slider_value_list[1]])
                    if current_point in self.practise_point_count_map[
                        "practise_press_point_map"][slider_value_list[1]]:

                        # 当点是列表最后一个点时
                        if current_point == self.practise_point_count_map[
                            "practise_press_point_map"][
                            slider_value_list[1]][-1] and \
                                1 != len(self.practise_point_count_map[
                                             "practise_press_point_map"][
                                             slider_value_list[1]]):
                            self.practise_point_count_map[
                                "practise_press_point_map"][
                                slider_value_list[1]].remove(current_point)
                        elif current_point != self.practise_point_count_map[
                            "practise_press_point_map"][
                            slider_value_list[1]][-1]:
                            # 当点不是列表最后一个点时
                            need_remove_point_list = self.practise_point_count_map[
                                "practise_press_point_map"][
                                slider_value_list[1]][
                                self.practise_point_count_map[
                                    "practise_press_point_map"][
                                    slider_value_list[1]].index(current_point):
                            ]
                            for sub_point in need_remove_point_list:
                                self.practise_point_count_map[
                                    "practise_press_point_map"][
                                    slider_value_list[1]].remove(sub_point)
                    else:
                        self.practise_point_count_map[
                            "practise_press_point_map"][
                            slider_value_list[1]].append(current_point)
            elif "loose_point_map" == slider_value_list[0]:
                if current_point in self.model_json[
                    "practise_loose_point_map"][slider_value_list[1]]:
                    print(self.practise_point_count_map[
                              "practise_loose_point_map"][
                              slider_value_list[1]])
                    if current_point in self.practise_point_count_map[
                        "practise_loose_point_map"][slider_value_list[1]]:

                        # 当点是列表最后一个点时
                        if current_point == self.practise_point_count_map[
                            "practise_loose_point_map"][
                            slider_value_list[1]][-1] and \
                                1 != len(self.practise_point_count_map[
                                             "practise_loose_point_map"][
                                             slider_value_list[1]]):
                            self.practise_point_count_map[
                                "practise_loose_point_map"][
                                slider_value_list[1]].remove(current_point)
                        elif current_point != self.practise_point_count_map[
                            "practise_loose_point_map"][
                            slider_value_list[1]][-1]:
                            # 当点不是列表最后一个点时
                            need_remove_point_list = \
                            self.practise_point_count_map[
                                "practise_loose_point_map"][
                                slider_value_list[1]][
                            self.practise_point_count_map[
                                "practise_loose_point_map"][
                                slider_value_list[1]].index(current_point):
                            ]
                            for sub_point in need_remove_point_list:
                                self.practise_point_count_map[
                                    "practise_loose_point_map"][
                                    slider_value_list[1]].remove(sub_point)
                    else:
                        self.practise_point_count_map[
                            "practise_loose_point_map"][slider_value_list[1]].append(current_point)


            if self.slider_last_point != current_point:
                self.painter.setPen(
                    QPen(QtCore.Qt.green, 10, Qt.SolidLine)
                )
                self.painter.drawPoint(
                    current_point[0], current_point[1]
                )
            self.slider_last_point = current_point
            self.painter.end()
            self.frame.update()

        except Exception as e:
            logging.exception(e)

    def _get_point_relative_index(self, first_point, second_point):
        try:
            line_a = abs(first_point[0] - second_point[0])
            line_b = abs(first_point[1] - second_point[1])
            line_c = math.sqrt(math.pow(line_a, 2) + math.pow(line_b, 2))
            return line_c
        except Exception as e:
            logging.exception(e)

    def get_point_relative_index(self, point_list, current_point):
        try:
            relative_value_map = {}
            min_index = 0
            min_relative_value = 0
            # 取到离目标点相对距离最小的点  最小相对距离和最小点的索引
            for sub_point in point_list:

                line_c = \
                    self._get_point_relative_index(sub_point, current_point)
                if not point_list.index(sub_point):
                    min_relative_value = line_c
                    continue
                if line_c < min_relative_value:
                    min_relative_value = line_c
                    min_index = point_list.index(sub_point)

            # 取最小点的前面一点，计算相对距离
            if not min_index:
                before_min_point = point_list[min_index - 1]
                before_min_value = \
                    self._get_point_relative_index(
                        before_min_point, point_list[min_index]
                    )
                before_relative_value = \
                    self._get_point_relative_index(
                        before_min_point, current_point
                    )
                if before_relative_value > before_min_value:
                    return min_index
                else:
                    return min_index - 1
            elif min_index == len(point_list) - 1:
                return min_index - 1
            else:
                return min_index

        except Exception as e:
            logging.exception(e)

    def add_point(self):
        try:
            slider_value_list = \
                self.slider_point_show_list[
                    self.horizontalSlider.value()
                ].split("-")
            current_point = \
                [int(slider_value_list[2]), int(slider_value_list[3])]
            if "press_point_map" == slider_value_list[0]:
                self.model_json["practise_press_point_map"][
                    slider_value_list[1]].insert(
                    len(self.practise_point_count_map[
                            "practise_press_point_map"][slider_value_list[1]]),
                    current_point
                )
                self.practise_point_count_map[
                    "practise_press_point_map"][
                    slider_value_list[1]].append(current_point)
                # self.model_json["practise_press_point_map"][
                #     slider_value_list[1]].insert(
                #     self.get_point_relative_index(
                #         self.model_json["practise_press_point_map"][
                #             slider_value_list[1]], current_point),
                #     current_point
                # )
            elif "loose_point_map" == slider_value_list[0]:
                self.model_json["practise_loose_point_map"][
                    slider_value_list[1]].insert(
                    len(self.practise_point_count_map[
                            "practise_loose_point_map"][slider_value_list[1]]),
                    current_point
                )
                self.practise_point_count_map[
                    "practise_loose_point_map"][
                    slider_value_list[1]].append(current_point)
                # self.model_json["practise_loose_point_map"][
                #     slider_value_list[1]].insert(
                #     self.get_point_relative_index(
                #         self.model_json["practise_loose_point_map"][
                #             slider_value_list[1]], current_point),
                #     current_point
                # )
            self.update_load_model()
            self.frame.update()
        except Exception as e:
            logging.exception(e)

    def delete_point(self):
        try:
            slider_value_list = \
                self.slider_point_show_list[
                    self.horizontalSlider.value()
                ].split("-")
            current_point = \
                [int(slider_value_list[2]), int(slider_value_list[3])]
            if "press_point_map" == slider_value_list[0]:
                for sub_point in self.model_json["practise_press_point_map"][
                        slider_value_list[1]]:
                    if 2 >= abs(sub_point[0] - current_point[0]) \
                            and 2 >= abs(sub_point[1] - current_point[1]):
                        self.model_json["practise_press_point_map"][
                            slider_value_list[1]].remove(sub_point)
                        self.practise_point_count_map[
                            "practise_press_point_map"][
                            slider_value_list[1]].remove(sub_point)
            elif "loose_point_map" == slider_value_list[0]:
                for sub_point in \
                        self.model_json["practise_loose_point_map"][
                            slider_value_list[1]]:
                    if 2 >= abs(sub_point[0] - current_point[0]) \
                            and 2 >= abs(sub_point[1] - current_point[1]):
                        self.model_json["practise_loose_point_map"][
                            slider_value_list[1]].remove(sub_point)
                        self.practise_point_count_map[
                            "practise_loose_point_map"][
                            slider_value_list[1]].remove(sub_point)
            self.update_load_model()
            self.frame.update()
        except Exception as e:
            logging.exception(e)

    def update_load_model(self):
        try:
            self.__board.fill(Qt.white)
            self.painter.begin(self.__board)
            self.press_point_key = \
                list(self.model_json["press_point_map"].keys())
            self.loose_point_key = \
                list(self.model_json["loose_point_map"].keys())
            self.practise_press_point_key = \
                list(self.model_json["practise_press_point_map"].keys())
            self.practise_loose_point_key = \
                list(self.model_json["practise_loose_point_map"].keys())
            last_point = [0, 0]
            all_point_key = []
            all_point_key.extend(self.press_point_key)
            all_point_key.extend(self.loose_point_key)
            all_point_key.sort()  # 从小到大排序
            self.all_point_count = 0
            self.slider_point_show_list = []
            for point_key in all_point_key:
                if point_key in self.press_point_key:
                    self.painter.setPen(
                        QPen(QtCore.Qt.red, 10, Qt.SolidLine)
                    )
                    point_list = self.model_json["press_point_map"][point_key]
                    point_type = "press_point_map"
                else:
                    self.painter.setPen(
                        QPen(QtCore.Qt.blue, 10, Qt.SolidLine)
                    )
                    point_list = self.model_json["loose_point_map"][point_key]
                    point_type = "loose_point_map"

                if not point_list:
                    continue
                self.all_point_count += len(point_list)
                for sub_point in point_list:
                    self.slider_point_show_list.append(
                        "%s-%s-%s-%s" %
                        (
                            point_type,
                            point_key,
                            sub_point[0],
                            sub_point[1]
                        )
                    )
                    if [0, 0] == last_point and 0 == point_list.index(sub_point):
                        last_point = sub_point
                        self.slider_last_point = sub_point
                        continue
                    current_point = sub_point
                    self.painter.drawLine(
                        last_point[0], last_point[1],
                        current_point[0], current_point[1]
                    )
                    last_point = current_point

            self.horizontalSlider.setMaximum(self.all_point_count - 1)

            self.practise_press_point_key.sort()
            for sub_practise_point_key in self.practise_press_point_key:
                self.painter.setPen(
                    QPen(QtCore.Qt.yellow, 10, Qt.SolidLine)
                )
                point_list = \
                    self.model_json[
                        "practise_press_point_map"][sub_practise_point_key]
                if not point_list:
                    continue

                for sub_practise_point in point_list:
                    self.painter.drawPoint(
                        sub_practise_point[0], sub_practise_point[1]
                    )

            self.practise_loose_point_key.sort()
            for sub_practise_point_key in self.practise_loose_point_key:
                self.painter.setPen(
                    QPen(QtCore.Qt.darkBlue, 10, Qt.SolidLine)
                )
                point_list = \
                    self.model_json[
                        "practise_loose_point_map"][sub_practise_point_key]
                if not point_list:
                    continue
                for sub_practise_point in point_list:
                    self.painter.drawPoint(
                        sub_practise_point[0], sub_practise_point[1]
                    )

            self.painter.end()
            self.update()
        except Exception as e:
            logging.exception(e)

    def load_model(self):
        try:
            self.__board.fill(Qt.white)
            self.horizontalSlider.setValue(0)
            self.model_name = self.comboBox.currentText()
            with open(self.model_map[self.model_name], "r") as f:
                self.model_json = json.loads(f.readline())
            self.painter.begin(self.__board)
            self.press_point_key = \
                list(self.model_json["press_point_map"].keys())
            self.loose_point_key = \
                list(self.model_json["loose_point_map"].keys())
            self.practise_press_point_key = \
                list(self.model_json["practise_press_point_map"].keys())
            self.practise_loose_point_key = \
                list(self.model_json["practise_loose_point_map"].keys())
            self.practise_point_count_map = {
                "practise_press_point_map": {},
                "practise_loose_point_map": {}
            }
            for sub_key in self.practise_press_point_key:
                self.practise_point_count_map[
                    "practise_press_point_map"][sub_key] = [
                    self.model_json["practise_press_point_map"][sub_key][0]
                ]

            for sub_key in self.practise_loose_point_key:
                self.practise_point_count_map[
                    "practise_loose_point_map"][sub_key] = [
                    self.model_json["practise_loose_point_map"][sub_key][0]
                ]
            print(self.practise_point_count_map)
            last_point = [0, 0]
            all_point_key = []
            all_point_key.extend(self.press_point_key)
            all_point_key.extend(self.loose_point_key)
            all_point_key.sort()  # 从小到大排序
            self.all_point_count = 0
            self.slider_point_show_list = []
            for point_key in all_point_key:
                if point_key in self.press_point_key:
                    self.painter.setPen(
                        QPen(QtCore.Qt.red, 10, Qt.SolidLine)
                    )
                    point_list = self.model_json["press_point_map"][point_key]
                    point_type = "press_point_map"
                else:
                    self.painter.setPen(
                        QPen(QtCore.Qt.blue, 10, Qt.SolidLine)
                    )
                    point_list = self.model_json["loose_point_map"][point_key]
                    point_type = "loose_point_map"

                if not point_list:
                    continue
                self.all_point_count += len(point_list)
                for sub_point in point_list:
                    self.slider_point_show_list.append(
                        "%s-%s-%s-%s" %
                        (
                            point_type,
                            point_key,
                            sub_point[0],
                            sub_point[1]
                        )
                    )
                    if [0, 0] == last_point and 0 == point_list.index(sub_point):
                        last_point = sub_point
                        self.slider_last_point = sub_point
                        continue
                    current_point = sub_point
                    self.painter.drawLine(
                        last_point[0], last_point[1],
                        current_point[0], current_point[1]
                    )
                    last_point = current_point

            self.horizontalSlider.setMaximum(self.all_point_count - 1)

            self.practise_press_point_key.sort()
            for sub_practise_point_key in self.practise_press_point_key:
                self.painter.setPen(
                    QPen(QtCore.Qt.yellow, 10, Qt.SolidLine)
                )
                point_list = \
                    self.model_json[
                        "practise_press_point_map"][sub_practise_point_key]
                if not point_list:
                    continue

                for sub_practise_point in point_list:
                    self.painter.drawPoint(
                        sub_practise_point[0], sub_practise_point[1]
                    )

            self.practise_loose_point_key.sort()
            for sub_practise_point_key in self.practise_loose_point_key:
                self.painter.setPen(
                    QPen(QtCore.Qt.darkBlue, 10, Qt.SolidLine)
                )
                point_list = \
                    self.model_json[
                        "practise_loose_point_map"][sub_practise_point_key]
                if not point_list:
                    continue
                for sub_practise_point in point_list:
                    self.painter.drawPoint(
                        sub_practise_point[0], sub_practise_point[1]
                    )

            self.painter.end()
            self.update()
        except Exception as e:
            logging.exception(e)

    def truncate_board(self):
        self.__board.fill(Qt.white)
        self.all_point_count = 0
        self.slider_point_show_list = []
        self.model_json = None
        self.horizontalSlider.setValue(0)
        self.update()

    def reset_model(self):
        try:
            self.__board.fill(Qt.white)
            with open(self.model_map[self.model_name], "r") as f:
                self.model_json = json.loads(f.readline())
            self.painter.begin(self.__board)
            self.press_point_key = \
                list(self.model_json["press_point_map"].keys())
            self.loose_point_key = \
                list(self.model_json["loose_point_map"].keys())
            self.practise_press_point_key = \
                list(self.model_json["practise_press_point_map"].keys())
            self.practise_loose_point_key = \
                list(self.model_json["practise_loose_point_map"].keys())
            self.practise_point_count_map = {
                "practise_press_point_map": {},
                "practise_loose_point_map": {}
            }
            self.horizontalSlider.setValue(0)
            for sub_key in self.practise_press_point_key:
                self.practise_point_count_map[
                    "practise_press_point_map"][sub_key] = [
                    self.model_json["practise_press_point_map"][sub_key][0]
                ]

            for sub_key in self.practise_loose_point_key:
                self.practise_point_count_map[
                    "practise_loose_point_map"][sub_key] = [
                    self.model_json["practise_loose_point_map"][sub_key][0]
                ]
            last_point = [0, 0]
            all_point_key = []
            all_point_key.extend(self.press_point_key)
            all_point_key.extend(self.loose_point_key)
            all_point_key.sort()  # 从小到大排序
            self.all_point_count = 0
            self.slider_point_show_list = []
            for point_key in all_point_key:
                if point_key in self.press_point_key:
                    self.painter.setPen(
                        QPen(QtCore.Qt.red, 10, Qt.SolidLine)
                    )
                    point_list = self.model_json["press_point_map"][point_key]
                    point_type = "press_point_map"
                else:
                    self.painter.setPen(
                        QPen(QtCore.Qt.blue, 10, Qt.SolidLine)
                    )
                    point_list = self.model_json["loose_point_map"][point_key]
                    point_type = "loose_point_map"

                if not point_list:
                    continue
                self.all_point_count += len(point_list)
                for sub_point in point_list:
                    self.slider_point_show_list.append(
                        "%s-%s-%s-%s" %
                        (
                            point_type,
                            point_key,
                            sub_point[0],
                            sub_point[1]
                        )
                    )
                    if [0, 0] == last_point and 0 == point_list.index(sub_point):
                        last_point = sub_point
                        self.slider_last_point = sub_point
                        continue
                    current_point = sub_point
                    self.painter.drawLine(
                        last_point[0], last_point[1],
                        current_point[0], current_point[1]
                    )
                    last_point = current_point

            self.horizontalSlider.setMaximum(self.all_point_count - 1)

            self.practise_press_point_key.sort()
            for sub_practise_point_key in self.practise_press_point_key:
                self.painter.setPen(
                    QPen(QtCore.Qt.yellow, 10, Qt.SolidLine)
                )
                point_list = \
                    self.model_json[
                        "practise_press_point_map"][sub_practise_point_key]
                if not point_list:
                    continue

                for sub_practise_point in point_list:
                    self.painter.drawPoint(
                        sub_practise_point[0], sub_practise_point[1]
                    )

            self.practise_loose_point_key.sort()
            for sub_practise_point_key in self.practise_loose_point_key:
                self.painter.setPen(
                    QPen(QtCore.Qt.darkBlue, 10, Qt.SolidLine)
                )
                point_list = \
                    self.model_json[
                        "practise_loose_point_map"][sub_practise_point_key]
                if not point_list:
                    continue
                for sub_practise_point in point_list:
                    self.painter.drawPoint(
                        sub_practise_point[0], sub_practise_point[1]
                    )

            self.painter.end()
            self.update()
        except Exception as e:
            logging.exception(e)

    def paintEvent(self, event):
        self.painter.begin(self)
        self.painter.drawPixmap(20, 10, self.__board)
        self.painter.end()

    def mouseMoveEvent(self, event):
        try:
            self.point_current = event.pos()
            self.frame.update()
        except Exception as e:
            logging.exception(e)

    def mouseReleaseEvent(self, event):
        self.is_press = False

    def mousePressEvent(self, event):
        self.is_press = True

