# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'user_model.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import csv
import json
import logging
import math
import os
import time
import pandas as pd
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QSize, QBasicTimer
from PyQt5.QtGui import QPainter, QPixmap, QPen, QCursor
from PyQt5.QtMultimedia import QSound
from PyQt5.QtWidgets import QWidget, QMessageBox
from src.config.load_config_conf import get_config_conf

config_map = get_config_conf()


class Ui_Form(QWidget):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1085, 706)
        Form.setMinimumSize(QtCore.QSize(1085, 706))
        Form.setMaximumSize(QtCore.QSize(1085, 706))
        self.suspend_button = QtWidgets.QPushButton(Form)
        self.suspend_button.setGeometry(QtCore.QRect(850, 120, 171, 50))
        self.suspend_button.setObjectName("suspend_button")
        self.suspend_button.clicked.connect(self.suspend_practise)

        self.start_button = QtWidgets.QPushButton(Form)
        self.start_button.setGeometry(QtCore.QRect(850, 50, 171, 50))
        self.start_button.setObjectName("start_button")
        self.start_button.clicked.connect(self.start_practise)

        self.stop_button = QtWidgets.QPushButton(Form)
        self.stop_button.setGeometry(QtCore.QRect(850, 190, 171, 50))
        self.stop_button.setObjectName("stop_button")
        self.stop_button.clicked.connect(self.stop_practise)

        self.comboBox = QtWidgets.QComboBox(Form)
        self.comboBox.setGeometry(QtCore.QRect(820, 10, 231, 22))
        self.comboBox.setObjectName("comboBox")
        self.frame = QtWidgets.QFrame(Form)
        self.frame.setGeometry(QtCore.QRect(10, 10, 771, 691))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.line = QtWidgets.QFrame(self.frame)
        self.line.setGeometry(QtCore.QRect(80, 60, 20, 531))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.frame)
        self.line_2.setGeometry(QtCore.QRect(650, 60, 20, 531))
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(self.frame)
        self.line_3.setGeometry(QtCore.QRect(90, 580, 571, 16))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.line_4 = QtWidgets.QFrame(self.frame)
        self.line_4.setGeometry(QtCore.QRect(90, 60, 571, 16))
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.ranking_list_button = QtWidgets.QPushButton(Form)
        self.ranking_list_button.setGeometry(QtCore.QRect(850, 260, 171, 50))
        self.ranking_list_button.setObjectName("ranking_list_button")

        self.progressBar = QtWidgets.QProgressBar(Form)
        self.progressBar.setGeometry(QtCore.QRect(790, 640, 291, 21))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.return_index_button = QtWidgets.QPushButton(Form)
        self.return_index_button.setGeometry(QtCore.QRect(850, 330, 171, 50))
        self.return_index_button.setObjectName("return_index_button")

        self.press_color_change_frame = QtWidgets.QFrame(Form)
        self.press_color_change_frame.setGeometry(
            QtCore.QRect(930, 510, 71, 21))
        self.press_color_change_frame.setFrameShape(
            QtWidgets.QFrame.StyledPanel)
        self.press_color_change_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.press_color_change_frame.setObjectName("press_color_change_frame")
        self.press_color_change_frame.setFrameStyle(
            QtWidgets.QFrame.Panel | QtWidgets.QFrame.Sunken)
        self.press_color_change_frame.setAutoFillBackground(True)
        self.press_color_change_frame.setPalette(QtGui.QPalette(QtCore.Qt.red))
        self.press_color_change_button = QtWidgets.QPushButton(Form)
        self.press_color_change_button.setGeometry(
            QtCore.QRect(1000, 510, 51, 23))
        self.press_color_change_button.setObjectName(
            "press_color_change_button")
        self.press_color_change_button.clicked.connect(
            self.press_pen_color_change)

        self.loose_color_change_frame = QtWidgets.QFrame(Form)
        self.loose_color_change_frame.setGeometry(
            QtCore.QRect(930, 550, 71, 21))
        self.loose_color_change_frame.setFrameShape(
            QtWidgets.QFrame.StyledPanel)
        self.loose_color_change_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.loose_color_change_frame.setObjectName("loose_color_change_frame")
        self.loose_color_change_frame.setFrameStyle(
            QtWidgets.QFrame.Panel | QtWidgets.QFrame.Sunken)
        self.loose_color_change_frame.setAutoFillBackground(True)
        self.loose_color_change_frame.setPalette(
            QtGui.QPalette(QtCore.Qt.blue))
        self.loose_color_change_button = QtWidgets.QPushButton(Form)
        self.loose_color_change_button.setGeometry(
            QtCore.QRect(1000, 550, 51, 23))
        self.loose_color_change_button.setObjectName(
            "loose_color_change_button")
        self.loose_color_change_button.clicked.connect(
            self.loose_pen_color_change)

        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(830, 500, 91, 31))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(830, 540, 91, 31))
        self.label_3.setObjectName("label_3")

        self.save_dir = os.path.join(
            os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "var",
            "model")
        self.grade_dir = os.path.join(
            os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "var",
            "grade")

        self.H = 771
        self.L = 691
        self.__size = QSize(self.L, self.H)
        # 新建QPixmap作为画板，尺寸为__size
        self.__board = QPixmap(self.__size)
        # self.__board = QPixmap()
        self.__board.fill(Qt.white)  # 用白色填充画板
        self.painter = QPainter()
        self.setMouseTracking(True)
        self.frame.setMouseTracking(True)
        self.model_name = ""
        self.model_json = None
        self.start_write = False
        self.painting = False
        self.first_point = None
        self.is_press = False
        self.press_color = QtCore.Qt.red
        self.loose_color = QtCore.Qt.blue
        self.color = QtCore.Qt.blue
        self.loose_value = 10
        self.press_value = 10
        self.value = 10
        # 计算之后的打点位置
        self.format_all_point_map = {
            "practise_press_point_map": {},
            "practise_loose_point_map": {},
        }
        self.format_all_point_list = []
        self.practise_count = 1
        self.step = 0
        self.practise_status = ""
        self.timer = QBasicTimer()
        self.timer.stop()
        self.practise_time_list = config_map["each_level_wait_time"]
        self.paint_point_index = 0
        self.loose_point_list = []
        self.exist_point_list = []
        self.use_time = 0  # 总耗时
        self.suspend_time = 0  # 暂停时间

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        # pixmap = QPixmap('笔绘图笔尖.png')
        # new_pixmap = pixmap.scaled(30, 30)
        # cursor = QCursor(new_pixmap, 0, 0)
        # Form.setCursor(cursor)
        self.suspend_button.setText(_translate("Form", "暂停训练"))
        self.start_button.setText(_translate("Form", "开始训练"))
        self.stop_button.setText(_translate("Form", "停止训练"))
        self.ranking_list_button.setText(_translate("Form", "排行榜"))
        self.return_index_button.setText(_translate("Form", "返回首页"))
        self.press_color_change_button.setText(_translate("Form", "更改"))
        self.loose_color_change_button.setText(_translate("Form", "更改"))
        self.label_2.setText(_translate("Form", "按住画笔颜色"))
        self.label_3.setText(_translate("Form", "松开画笔颜色"))

    def _load_default(self):
        try:
            _translate = QtCore.QCoreApplication.translate
            self.comboBox.clear()
            self.comboBox.clearEditText()
            self.model_map = {}
            for root, _, files in os.walk(self.save_dir):
                for file in files:
                    model_full_name = file.rstrip(".json")
                    full_path = os.path.join(root, file)
                    model_name = model_full_name.split("-")[0]
                    if model_name not in self.model_map.keys():
                        self.model_map[model_name] = \
                            {
                                "model_name": model_full_name,
                                "model_path": full_path
                            }
                    else:
                        if model_full_name > self.model_map[model_name]["model_name"]:
                            self.model_map[model_name] = \
                                {
                                    "model_name": model_full_name,
                                    "model_path": full_path
                                }
            model_list = list(self.model_map.keys())
            for key in model_list:
                self.comboBox.addItem("")
                self.comboBox.setItemText(
                    model_list.index(key),
                    _translate("Form", key)
                )
        except Exception as e:
            logging.exception(e)

    def truncate_board(self):
        self.__board.fill(Qt.white)
        self.update()
        self.stop_practise()

    def press_pen_color_change(self):
        self.press_color = QtWidgets.QColorDialog.getColor(
            QtCore.Qt.blue)
        self.press_color_change_frame.setPalette(QtGui.QPalette(self.press_color))

    def loose_pen_color_change(self):
        self.loose_color = QtWidgets.QColorDialog.getColor(
            QtCore.Qt.blue)
        self.loose_color_change_frame.setPalette(QtGui.QPalette(self.loose_color))

    def suspend_practise(self):
        try:
            self.suspend_time = time.time()
            self.timer.stop()
            self.painting = False
            self.start_write = False
            tmp_last_point = self.loose_point_list[0]
            self.painter.begin(self.__board)
            self.painter.setPen(
                QPen(QtCore.Qt.white, self.value + 1, Qt.SolidLine)
            )
            logging.info(self.loose_point_list)
            for sub_point in self.loose_point_list:
                current_point = sub_point
                self.painter.drawLine(
                    tmp_last_point[0], tmp_last_point[1],
                    current_point[0], current_point[1]
                )
                tmp_last_point = current_point
            self.painter.end()
            self.loose_point_list = []
            self.frame.update()
        except Exception as e:
            logging.exception(e)

    def start_practise(self):
        try:
            if self.suspend_time:
                self.suspend_time = time.time() - self.suspend_time

            self.model_name = self.comboBox.currentText()
            model_path = self.model_map[self.model_name]["model_path"]
            if not self.model_json:
                self.__board.fill(Qt.white)
                with open(model_path, "r") as f:
                    self.use_time = time.time()
                    self.model_json = json.loads(f.readline())
            self.painting = True
            if not self.practise_status:  # 当第一次运行时
                self.timer.start(
                    int(self.practise_time_list[0]),
                    self
                )
            if "complated" == self.practise_status:  # 当完成一次挑战时
                if len(self.practise_time_list) > self.practise_count:
                    self.practise_count += 1
                self.timer.start(
                    int(self.practise_time_list[self.practise_count]),
                    self
                )
            elif "failed" == self.practise_status:  # 当挑战失败时
                self.timer.start(
                    int(self.practise_time_list[self.practise_count]),
                    self
                )
        except Exception as e:
            logging.exception(e)

    def stop_practise(self):
        self.__board.fill(Qt.white)
        self.frame.update()
        self.painting = False
        self.start_write = False
        self.first_point = None
        self.model_json = None
        self.suspend_time = 0
        self.use_time = 0
        self.practise_count = 1
        self.paint_point_index = 0
        self.step = 0
        self.practise_status = ""
        self.format_all_point_map = {
            "practise_press_point_map": {},
            "practise_loose_point_map": {},
        }
        self.format_all_point_list = []
        self.timer.stop()
        self.progressBar.setProperty("value", self.step)

    def save_grade_to_csv(self):
        grade_file_path = os.path.join(self.grade_dir, self.model_name + ".csv")
        if os.path.exists(grade_file_path):
            with open(grade_file_path, "a", newline="") as f:
                csv_writer = csv.writer(f)
                csv_writer.writerow([
                    self.practise_count,
                    self.use_time,
                    time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
                ])
            data = pd.read_csv(open(grade_file_path))
            df = \
                data.sort_values(
                    by=['practise_count', 'use_time'],
                    ascending=[False, True]
                )
            df.to_csv(grade_file_path, index=False)
        else:
            with open(grade_file_path, "a", newline="") as f:
                csv_writer = csv.writer(f)
                csv_writer.writerow([
                    "practise_count",
                    "use_time",
                    "action_time"
                ])
                csv_writer.writerow([
                    self.practise_count,
                    self.use_time,
                    time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
                ])

    def timerEvent(self, e):
        try:
            complate_flag = False
            if self.format_all_point_list:
                complate_flag = True
                for sub_json in self.format_all_point_list:
                    if not sub_json["is_used"]:
                        complate_flag = False

            if complate_flag:
                self.timer.stop()
                QMessageBox.information(self, '挑战成功', '恭喜您挑战成功，请开始下一关！')
                self.practise_status = "complated"
                self.is_press = False
                self.format_all_point_map = {
                    "practise_press_point_map": {},
                    "practise_loose_point_map": {},
                }
                self.format_all_point_list = []
                self.start_write = False
                self.painting = False
                self.paint_point_index = 0
                self.__board.fill(Qt.white)
                self.start_practise()
                self.step = 0
                self.progressBar.setProperty("value", self.step)
                return

            if self.step >= 100:
                self.timer.stop()
                QMessageBox.information(self, '挑战失败', '您好，您未挑战成功，请重试！')
                self.step = 0
                self.practise_status = "failed"
                self.use_time = time.time() - self.use_time - self.suspend_time
                self.save_grade_to_csv()
                self.stop_practise()
                return

            self.step = self.step + 1
            self.progressBar.setProperty("value", self.step)
        except Exception as e:
            logging.exception(e)

    def change_prompt(self, prompt_value):
        if "1" == prompt_value:
            self.line.setGeometry(QtCore.QRect(10, 10, 20, 650))
            self.line_2.setGeometry(QtCore.QRect(750, 10, 20, 650))
            self.line_3.setGeometry(QtCore.QRect(10, 580, 760, 150))
            self.line_4.setGeometry(QtCore.QRect(10, -55, 760, 150))
        elif "2" == prompt_value:
            self.line.setGeometry(QtCore.QRect(40, 30, 20, 600))
            self.line_2.setGeometry(QtCore.QRect(700, 30, 20, 600))
            self.line_3.setGeometry(QtCore.QRect(40, 550, 680, 150))
            self.line_4.setGeometry(QtCore.QRect(40, -35, 680, 150))
        elif "3" == prompt_value:
            self.line.setGeometry(QtCore.QRect(80, 60, 20, 531))
            self.line_2.setGeometry(QtCore.QRect(650, 60, 20, 531))
            self.line_3.setGeometry(QtCore.QRect(80, 580, 590, 10))
            self.line_4.setGeometry(QtCore.QRect(80, 60, 590, 20))
        elif "4" == prompt_value:
            self.line.setGeometry(QtCore.QRect(110, 90, 20, 480))
            self.line_2.setGeometry(QtCore.QRect(600, 90, 20, 480))
            self.line_3.setGeometry(QtCore.QRect(105, 520, 520, 70))
            self.line_4.setGeometry(QtCore.QRect(105, 70, 520, 70))
        elif "5" == prompt_value:
            self.line.setGeometry(QtCore.QRect(140, 120, 20, 430))
            self.line_2.setGeometry(QtCore.QRect(550, 120, 20, 430))
            self.line_3.setGeometry(QtCore.QRect(130, 500, 450, 70))
            self.line_4.setGeometry(QtCore.QRect(130, 100, 450, 70))
        else:
            pass

    def paintEvent(self, event):
        self.painter.begin(self)
        self.painter.drawPixmap(20, 10, self.__board)
        self.painter.end()

    def paint_point(self, point_json):
        try:
            self.painter.begin(self.__board)
            self.painter.setPen(
                QPen(point_json["color"], self.value + 10, Qt.SolidLine)
            )
            self.painter.drawPoint(
                point_json["point"][0], point_json["point"][1]
            )
            QSound.play('13386.wav')
            self.painter.end()
            self.frame.update()
        except Exception as e:
            logging.exception(e)

    def mouseMoveEvent(self, mouseEvent):
        try:
            self.point_current = mouseEvent.pos()
            if self.painting and self.start_write:
                if self.loose_point_list:
                    self.loose_point_list.append(
                        (self.point_current.x(),
                         self.point_current.y())
                    )
                if self.paint_point_index + 1 <= \
                        len(self.format_all_point_list):
                    if abs(
                            self.point_current.x() -
                            self.format_all_point_list[
                                self.paint_point_index]["point"][
                                0]) <= 4 and \
                            abs(self.point_current.y() -
                                self.format_all_point_list[self.paint_point_index][
                                    "point"][
                                    1]) <= 4 and not \
                            self.format_all_point_list[
                            self.paint_point_index]["is_used"]:
                        self.format_all_point_list[
                            self.paint_point_index]["is_used"] = True
                        if self.paint_point_index + 1 < \
                                len(self.format_all_point_list):
                            self.paint_point(
                                    self.format_all_point_list[
                                        self.paint_point_index + 1])
                        self.paint_point_index += 1

                self.painter.begin(self.__board)
                self.painter.setPen(
                    QPen(self.color, self.value, Qt.SolidLine)
                )
                self.painter.drawLine(
                    self.point_last,
                    self.point_current
                )
                self.painter.end()
            self.point_last = self.point_current
            self.frame.update()
        except Exception as e:
            logging.exception(e)

    def mouseReleaseEvent(self, event):
        self.color = self.loose_color
        self.value = self.loose_value
        self.loose_point_list.append(
            (event.pos().x(), event.pos().y())
        )

    def mousePressEvent(self, event):
        try:
            self.loose_point_list = []
            if not self.start_write and self.painting:
                self.start_write = True
                if not self.format_all_point_list:
                    self.first_point = event.pos()
                    self.compute_all_point_location()
                    self.paint_point(
                        self.format_all_point_list[self.paint_point_index + 1])
                    self.format_all_point_list[0]["is_used"] = True
                    self.paint_point_index = 1
            self.color = self.press_color
            self.value = self.press_value
        except Exception as e:
            logging.exception(e)

    def compute_all_point_location(self):
        try:
            self.practise_press_point_key = \
                list(self.model_json["practise_press_point_map"].keys())
            self.practise_loose_point_key = \
                list(self.model_json["practise_loose_point_map"].keys())
            self.practise_press_point_key.sort()  # 从小到大排序
            real_first_point = \
                self.model_json[
                    "practise_press_point_map"][
                    self.practise_press_point_key[0]][0]
            current_first_point = [self.first_point.x(), self.first_point.y()]
            x_len = real_first_point[0] - current_first_point[0]
            y_len = real_first_point[1] - current_first_point[1]
            for sub_key in self.model_json["practise_press_point_map"].keys():
                self.format_all_point_map["practise_press_point_map"][sub_key] = []
                for sub_point in self.model_json["practise_press_point_map"][sub_key]:
                    target_point_x = sub_point[0] - x_len
                    target_point_y = sub_point[1] - y_len
                    self.format_all_point_map["practise_press_point_map"][
                        sub_key].append([target_point_x, target_point_y])

            for sub_key in self.model_json["practise_loose_point_map"].keys():
                self.format_all_point_map["practise_loose_point_map"][sub_key] = []
                for sub_point in self.model_json["practise_loose_point_map"][sub_key]:
                    target_point_x = sub_point[0] - x_len
                    target_point_y = sub_point[1] - y_len
                    self.format_all_point_map["practise_loose_point_map"][
                        sub_key].append([target_point_x, target_point_y])

            format_practise_press_point_key = \
                list(self.format_all_point_map["practise_press_point_map"].keys())
            format_practise_loose_point_key = \
                list(self.format_all_point_map["practise_loose_point_map"].keys())
            tmp_all_key = []
            tmp_all_key.extend(format_practise_press_point_key)
            tmp_all_key.extend(format_practise_loose_point_key)
            tmp_all_key.sort()
            for key in tmp_all_key:
                if key in format_practise_press_point_key:
                    color = QtCore.Qt.yellow
                    point_list = \
                        self.format_all_point_map[
                            "practise_press_point_map"][key]
                else:
                    color = QtCore.Qt.darkBlue
                    point_list = \
                        self.format_all_point_map[
                            "practise_loose_point_map"][key]

                for sub_point in point_list:
                    tmp_json = {
                        "point": sub_point,
                        "is_used": False,
                        "color": color
                    }
                    self.format_all_point_list.append(tmp_json)

        except Exception as e:
            logging.exception(e)
