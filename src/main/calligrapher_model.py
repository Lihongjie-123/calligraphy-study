# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'calligrapher_model.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json
import logging
import os
import time
from datetime import datetime

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPainter, QPen, QPixmap, QCursor
from PyQt5.QtCore import Qt, QSize, QPoint
from PyQt5.QtWidgets import QWidget, QHBoxLayout, QFileDialog
from pandas import DataFrame

from src.main.PaintBoard import PaintBoard


class Ui_Form(QWidget):

    def __init__(self, Parent=None):
        super().__init__(Parent)

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1085, 706)
        Form.setMinimumSize(QtCore.QSize(1085, 706))
        Form.setMaximumSize(QtCore.QSize(1085, 706))
        self.frame = QtWidgets.QFrame(Form)
        self.frame.setGeometry(QtCore.QRect(20, 10, 771, 691))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.line = QtWidgets.QFrame(self.frame)
        self.line.setGeometry(QtCore.QRect(80, 60, 20, 531))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.frame)
        self.line_2.setGeometry(QtCore.QRect(650, 60, 20, 531))
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(self.frame)
        self.line_3.setGeometry(QtCore.QRect(90, 580, 571, 16))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.line_4 = QtWidgets.QFrame(self.frame)
        self.line_4.setGeometry(QtCore.QRect(90, 60, 571, 16))
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")

        self.start_input_button = QtWidgets.QPushButton(Form)
        self.start_input_button.setGeometry(QtCore.QRect(850, 30, 171, 51))
        self.start_input_button.setObjectName("start_input_button")
        self.start_input_button.clicked.connect(self.start_input)

        self.truncate_board_button = QtWidgets.QPushButton(Form)
        self.truncate_board_button.setGeometry(QtCore.QRect(850, 110, 171, 51))
        self.truncate_board_button.setObjectName("truncate_board_button")
        self.truncate_board_button.clicked.connect(self.truncate_board)

        self.save_button = QtWidgets.QPushButton(Form)
        self.save_button.setGeometry(QtCore.QRect(850, 270, 171, 51))
        self.save_button.setObjectName("save_button")
        self.save_button.clicked.connect(
            self.save_work)

        self.delete_last_trail_button = QtWidgets.QPushButton(Form)
        self.delete_last_trail_button.setGeometry(QtCore.QRect(850, 190, 171, 51))
        self.delete_last_trail_button.setObjectName("delete_last_trail_button")
        self.delete_last_trail_button.clicked.connect(
            self.delete_last_trail)

        self.return_index_button = QtWidgets.QPushButton(Form)
        self.return_index_button.setGeometry(QtCore.QRect(850, 350, 171, 51))
        self.return_index_button.setObjectName("return_index_button")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(820, 550, 61, 31))
        self.label.setObjectName("label")
        self.spinBox = QtWidgets.QSpinBox(Form)
        self.spinBox.setValue(10)
        self.spinBox.setGeometry(QtCore.QRect(920, 560, 111, 22))
        self.spinBox.setObjectName("spinBox")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(820, 590, 91, 31))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(820, 630, 91, 31))
        self.label_3.setObjectName("label_3")
        # self.eraser_checkBox = QtWidgets.QCheckBox(Form)
        # self.eraser_checkBox.setGeometry(QtCore.QRect(900, 520, 71, 17))
        # self.eraser_checkBox.setObjectName("eraser_checkBox")

        self.press_color_change_frame = QtWidgets.QFrame(Form)
        self.press_color_change_frame.setGeometry(
            QtCore.QRect(920, 600, 71, 21))
        self.press_color_change_frame.setFrameShape(
            QtWidgets.QFrame.StyledPanel)
        self.press_color_change_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.press_color_change_frame.setObjectName("press_color_change_frame")
        self.press_color_change_frame.setFrameStyle(
            QtWidgets.QFrame.Panel | QtWidgets.QFrame.Sunken)
        self.press_color_change_frame.setAutoFillBackground(True)
        self.press_color_change_frame.setPalette(QtGui.QPalette(QtCore.Qt.red))
        self.press_color_change_button = QtWidgets.QPushButton(Form)
        self.press_color_change_button.setGeometry(
            QtCore.QRect(990, 600, 51, 23))
        self.press_color_change_button.setObjectName(
            "press_color_change_button")
        self.press_color_change_button.clicked.connect(
            self.press_pen_color_change)

        self.loose_color_change_frame = QtWidgets.QFrame(Form)
        self.loose_color_change_frame.setGeometry(
            QtCore.QRect(920, 640, 71, 21))
        self.loose_color_change_frame.setFrameShape(
            QtWidgets.QFrame.StyledPanel)
        self.loose_color_change_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.loose_color_change_frame.setObjectName("loose_color_change_frame")
        self.loose_color_change_frame.setFrameStyle(
            QtWidgets.QFrame.Panel | QtWidgets.QFrame.Sunken)
        self.loose_color_change_frame.setAutoFillBackground(True)
        self.loose_color_change_frame.setPalette(
            QtGui.QPalette(QtCore.Qt.blue))
        self.loose_color_change_button = QtWidgets.QPushButton(Form)
        self.loose_color_change_button.setGeometry(
            QtCore.QRect(990, 640, 51, 23))
        self.loose_color_change_button.setObjectName(
            "loose_color_change_button")
        self.loose_color_change_button.clicked.connect(
            self.loose_pen_color_change)

        self.H = 771
        self.L = 691
        self.__size = QSize(self.L, self.H)
        # 新建QPixmap作为画板，尺寸为__size
        self.__board = QPixmap(self.__size)
        # self.__board = QPixmap()
        self.__board.fill(Qt.white)  # 用白色填充画板
        self.pos_xy = []
        self.painter = QPainter()
        # self.pen = QPen(Qt.red, 10, Qt.SolidLine)
        self.press_color = QtCore.Qt.red
        self.loose_color = QtCore.Qt.blue
        self.press_value = 10
        self.loose_value = 10
        self.color = QtCore.Qt.blue
        self.value = 10
        self.is_press = False
        self.point_last = QPoint(0, 0)
        self.point_current = QPoint(0, 0)
        self.start_write = False  # 开始第一次点击
        self.all_point_map = {
            "press_point_map": {},
            "loose_point_map": {},
            "practise_press_point_map": {},
            "practise_loose_point_map": {},
        }
        self.loose_point_list = []
        self.press_point_list = []
        self.save_dir = os.path.join(
            os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "var",
            "model")
        self.char_size = 0  # 字的大小
        self.center_point = [375, 340]  # 画框中心点坐标

        # 是否开始
        self.painting = False
        self.setMouseTracking(True)
        self.frame.setMouseTracking(True)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def change_prompt(self, prompt_value):
        if "1" == prompt_value:
            self.line.setGeometry(QtCore.QRect(10, 10, 20, 650))
            self.line_2.setGeometry(QtCore.QRect(750, 10, 20, 650))
            self.line_3.setGeometry(QtCore.QRect(10, 580, 760, 150))
            self.line_4.setGeometry(QtCore.QRect(10, -55, 760, 150))
            self.char_size = 1.25
        elif "2" == prompt_value:
            self.line.setGeometry(QtCore.QRect(40, 30, 20, 600))
            self.line_2.setGeometry(QtCore.QRect(700, 30, 20, 600))
            self.line_3.setGeometry(QtCore.QRect(40, 550, 680, 150))
            self.line_4.setGeometry(QtCore.QRect(40, -35, 680, 150))
            self.char_size = 1.2
        elif "3" == prompt_value:
            self.line.setGeometry(QtCore.QRect(80, 60, 20, 531))
            self.line_2.setGeometry(QtCore.QRect(650, 60, 20, 531))
            self.line_3.setGeometry(QtCore.QRect(80, 580, 590, 10))
            self.line_4.setGeometry(QtCore.QRect(80, 60, 590, 20))
            self.char_size = 1.15
        elif "4" == prompt_value:
            self.line.setGeometry(QtCore.QRect(110, 90, 20, 480))
            self.line_2.setGeometry(QtCore.QRect(600, 90, 20, 480))
            self.line_3.setGeometry(QtCore.QRect(105, 520, 520, 70))
            self.line_4.setGeometry(QtCore.QRect(105, 70, 520, 70))
            self.char_size = 1.1
        elif "5" == prompt_value:
            self.line.setGeometry(QtCore.QRect(140, 120, 20, 430))
            self.line_2.setGeometry(QtCore.QRect(550, 120, 20, 430))
            self.line_3.setGeometry(QtCore.QRect(130, 500, 450, 70))
            self.line_4.setGeometry(QtCore.QRect(130, 100, 450, 70))
            self.char_size = 1.05
        else:
            pass

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        # pixmap = QPixmap('笔绘图笔尖.png')
        # new_pixmap = pixmap.scaled(30, 30)
        # cursor = QCursor(new_pixmap, 0, 0)
        # Form.setCursor(cursor)
        self.start_input_button.setText(_translate("Form", "开始输入"))
        self.truncate_board_button.setText(_translate("Form", "清空画板"))
        self.save_button.setText(_translate("Form", "保存作品"))
        # self.delete_first_trail_button.setText(_translate("Form", "去除首痕"))
        self.delete_last_trail_button.setText(_translate("Form", "去除尾痕"))
        self.return_index_button.setText(_translate("Form", "返回首页"))
        self.label.setText(_translate("Form", "画笔粗细"))
        self.label_2.setText(_translate("Form", "按住画笔颜色"))
        self.label_3.setText(_translate("Form", "松开画笔颜色"))
        # self.eraser_checkBox.setText(_translate("Form", "橡皮擦"))
        self.press_color_change_button.setText(_translate("Form", "更改"))
        self.loose_color_change_button.setText(_translate("Form", "更改"))

    def change_size_from_src_point(self):
        # {"1631546.21345":[[],[],[]], "1631546.21345":[[],[],[]], }
        practise_press_point_map = \
            self.all_point_map["practise_press_point_map"]
        # {"1631546.21345":[[],[],[]], "1631546.21345":[[],[],[]], }
        practise_loose_point_map = \
            self.all_point_map["practise_loose_point_map"]
        press_point_map = \
            self.all_point_map["press_point_map"]
        loose_point_map = \
            self.all_point_map["loose_point_map"]
        _practise_press_point_map = {}
        _practise_loose_point_map = {}
        _press_point_map = {}
        _loose_point_map = {}

        all_point_list = []
        for sub_key in practise_press_point_map:
            all_point_list.extend(practise_press_point_map[sub_key])

        for sub_key in practise_loose_point_map:
            all_point_list.extend(practise_loose_point_map[sub_key])

        for sub_key in press_point_map:
            all_point_list.extend(press_point_map[sub_key])

        for sub_key in loose_point_map:
            all_point_list.extend(loose_point_map[sub_key])

        min_x = 0
        min_y = 0
        max_x = 0
        max_y = 0
        for sub_point in all_point_list:
            if not min_x:
                min_x = sub_point[0]
            if not min_y:
                min_y = sub_point[1]
            if not max_x:
                max_x = sub_point[0]
            if not max_y:
                max_y = sub_point[1]

            if min_x > sub_point[0]:
                min_x = sub_point[0]
            if max_x < sub_point[0]:
                min_x = sub_point[1]
            if min_y > sub_point[0]:
                min_y = sub_point[0]
            if max_y < sub_point[0]:
                max_y = sub_point[1]

        char_center_point = [int((max_x - min_x) / 2), int((max_y - min_y) / 2)]
        tmp_x = char_center_point[0] - self.center_point[0]
        tmp_y = char_center_point[1] - self.center_point[1]
        for sub_key in practise_press_point_map.keys():
            for sub_point in practise_press_point_map[sub_key]:
                practise_press_point_map[sub_key][
                    practise_press_point_map[sub_key].index(sub_point)] = \
                    [
                        sub_point[0] - tmp_x,
                        sub_point[0] - tmp_y,
                    ]

        for sub_key in practise_loose_point_map.keys():
            for sub_point in practise_loose_point_map[sub_key]:
                practise_loose_point_map[sub_key][
                    practise_loose_point_map[sub_key].index(sub_point)] = \
                    [
                        sub_point[0] - tmp_x,
                        sub_point[0] - tmp_y,
                    ]

        for sub_key in press_point_map.keys():
            for sub_point in press_point_map[sub_key]:
                press_point_map[sub_key][
                    press_point_map[sub_key].index(sub_point)] = \
                    [
                        sub_point[0] - tmp_x,
                        sub_point[0] - tmp_y,
                    ]

        for sub_key in loose_point_map.keys():
            for sub_point in loose_point_map[sub_key]:
                loose_point_map[sub_key][
                    loose_point_map[sub_key].index(sub_point)] = \
                    [
                        sub_point[0] + tmp_x,
                        sub_point[0] + tmp_y,
                    ]

        for sub_key in practise_press_point_map.keys():
            if sub_key not in _practise_press_point_map.keys():
                _practise_press_point_map[sub_key] = []
            for sub_point in practise_press_point_map[sub_key]:
                if sub_point[0] < self.center_point[0] \
                        and sub_point[1] < self.center_point[1]:
                    x = int(770 - (770 - sub_point[0]) * self.char_size)
                    y = int(690 - (690 - sub_point[1]) * self.char_size)
                    _practise_press_point_map[sub_key].append([x, y])
                elif sub_point[0] > self.center_point[0] \
                        and sub_point[1] < self.center_point[1]:
                    x = int(sub_point[0] * self.char_size)
                    y = int(690 - (690 - sub_point[1]) * self.char_size)
                    _practise_press_point_map[sub_key].append([x, y])
                elif sub_point[0] > self.center_point[0] \
                        and sub_point[1] > self.center_point[1]:
                    x = int(sub_point[0] * self.char_size)
                    y = int(sub_point[1] * self.char_size)
                    _practise_press_point_map[sub_key].append([x, y])
                elif sub_point[0] < self.center_point[0] \
                        and sub_point[1] > self.center_point[1]:
                    x = int(770 - (770 - sub_point[0]) * self.char_size)
                    y = int(sub_point[1] * self.char_size)
                    _practise_press_point_map[sub_key].append([x, y])
                elif sub_point[0] < self.center_point[0] \
                        and sub_point[1] == self.center_point[1]:
                    x = int(770 - (770 - sub_point[0]) * self.char_size)
                    y = self.center_point[1]
                    _practise_press_point_map[sub_key].append([x, y])
                elif sub_point[0] > self.center_point[0] \
                        and sub_point[1] == self.center_point[1]:
                    x = int(sub_point[0] * self.char_size)
                    y = self.center_point[1]
                    _practise_press_point_map[sub_key].append([x, y])
                elif sub_point[0] == self.center_point[0] \
                        and sub_point[1] < self.center_point[1]:
                    x = self.center_point[0]
                    y = int(690 - (690 - sub_point[1]) * self.char_size)
                    _practise_press_point_map[sub_key].append([x, y])
                elif sub_point[0] == self.center_point[0] \
                        and sub_point[1] > self.center_point[1]:
                    x = self.center_point[0]
                    y = int(sub_point[1] * self.char_size)
                    _practise_press_point_map[sub_key].append([x, y])
                else:
                    x = self.center_point[0]
                    y = self.center_point[1]
                    _practise_press_point_map[sub_key].append([x, y])

        for sub_key in practise_loose_point_map.keys():
            if sub_key not in _practise_loose_point_map.keys():
                _practise_loose_point_map[sub_key] = []
            for sub_point in practise_loose_point_map[sub_key]:
                if sub_point[0] < self.center_point[0] \
                        and sub_point[1] < self.center_point[1]:
                    x = int(770 - (770 - sub_point[0]) * self.char_size)
                    y = int(690 - (690 - sub_point[1]) * self.char_size)
                    _practise_loose_point_map[sub_key].append([x, y])
                elif sub_point[0] > self.center_point[0] \
                        and sub_point[1] < self.center_point[1]:
                    x = int(sub_point[0] * self.char_size)
                    y = int(690 - (690 - sub_point[1]) * self.char_size)
                    _practise_loose_point_map[sub_key].append([x, y])
                elif sub_point[0] > self.center_point[0] \
                        and sub_point[1] > self.center_point[1]:
                    x = int(sub_point[0] * self.char_size)
                    y = int(sub_point[1] * self.char_size)
                    _practise_loose_point_map[sub_key].append([x, y])
                elif sub_point[0] < self.center_point[0] \
                        and sub_point[1] > self.center_point[1]:
                    x = int(770 - (770 - sub_point[0]) * self.char_size)
                    y = int(sub_point[1] * self.char_size)
                    _practise_loose_point_map[sub_key].append([x, y])
                elif sub_point[0] < self.center_point[0] \
                        and sub_point[1] == self.center_point[1]:
                    x = int(770 - (770 - sub_point[0]) * self.char_size)
                    y = self.center_point[1]
                    _practise_loose_point_map[sub_key].append([x, y])
                elif sub_point[0] > self.center_point[0] \
                        and sub_point[1] == self.center_point[1]:
                    x = int(sub_point[0] * self.char_size)
                    y = self.center_point[1]
                    _practise_loose_point_map[sub_key].append([x, y])
                elif sub_point[0] == self.center_point[0] \
                        and sub_point[1] < self.center_point[1]:
                    x = self.center_point[0]
                    y = int(690 - (690 - sub_point[1]) * self.char_size)
                    _practise_loose_point_map[sub_key].append([x, y])
                elif sub_point[0] == self.center_point[0] \
                        and sub_point[1] > self.center_point[1]:
                    x = self.center_point[0]
                    y = int(sub_point[1] * self.char_size)
                    _practise_loose_point_map[sub_key].append([x, y])
                else:
                    x = self.center_point[0]
                    y = self.center_point[1]
                    _practise_loose_point_map[sub_key].append([x, y])

        for sub_key in press_point_map.keys():
            if sub_key not in _press_point_map.keys():
                _press_point_map[sub_key] = []
            for sub_point in press_point_map[sub_key]:
                if sub_point[0] < self.center_point[0] \
                        and sub_point[1] < self.center_point[1]:
                    x = int(770 - (770 - sub_point[0]) * self.char_size)
                    y = int(690 - (690 - sub_point[1]) * self.char_size)
                    _press_point_map[sub_key].append([x, y])
                elif sub_point[0] > self.center_point[0] \
                        and sub_point[1] < self.center_point[1]:
                    x = int(sub_point[0] * self.char_size)
                    y = int(690 - (690 - sub_point[1]) * self.char_size)
                    _press_point_map[sub_key].append([x, y])
                elif sub_point[0] > self.center_point[0] \
                        and sub_point[1] > self.center_point[1]:
                    x = int(sub_point[0] * self.char_size)
                    y = int(sub_point[1] * self.char_size)
                    _press_point_map[sub_key].append([x, y])
                elif sub_point[0] < self.center_point[0] \
                        and sub_point[1] > self.center_point[1]:
                    x = int(770 - (770 - sub_point[0]) * self.char_size)
                    y = int(sub_point[1] * self.char_size)
                    _press_point_map[sub_key].append([x, y])
                elif sub_point[0] < self.center_point[0] \
                        and sub_point[1] == self.center_point[1]:
                    x = int(770 - (770 - sub_point[0]) * self.char_size)
                    y = self.center_point[1]
                    _press_point_map[sub_key].append([x, y])
                elif sub_point[0] > self.center_point[0] \
                        and sub_point[1] == self.center_point[1]:
                    x = int(sub_point[0] * self.char_size)
                    y = self.center_point[1]
                    _press_point_map[sub_key].append([x, y])
                elif sub_point[0] == self.center_point[0] \
                        and sub_point[1] < self.center_point[1]:
                    x = self.center_point[0]
                    y = int(690 - (690 - sub_point[1]) * self.char_size)
                    _press_point_map[sub_key].append([x, y])
                elif sub_point[0] == self.center_point[0] \
                        and sub_point[1] > self.center_point[1]:
                    x = self.center_point[0]
                    y = int(sub_point[1] * self.char_size)
                    _press_point_map[sub_key].append([x, y])
                else:
                    x = self.center_point[0]
                    y = self.center_point[1]
                    _press_point_map[sub_key].append([x, y])

        for sub_key in loose_point_map.keys():
            if sub_key not in _loose_point_map.keys():
                _loose_point_map[sub_key] = []
            for sub_point in loose_point_map[sub_key]:
                if sub_point[0] < self.center_point[0] \
                        and sub_point[1] < self.center_point[1]:
                    x = int(770 - (770 - sub_point[0]) * self.char_size)
                    y = int(690 - (690 - sub_point[1]) * self.char_size)
                    _loose_point_map[sub_key].append([x, y])
                elif sub_point[0] > self.center_point[0] \
                        and sub_point[1] < self.center_point[1]:
                    x = int(sub_point[0] * self.char_size)
                    y = int(690 - (690 - sub_point[1]) * self.char_size)
                    _loose_point_map[sub_key].append([x, y])
                elif sub_point[0] > self.center_point[0] \
                        and sub_point[1] > self.center_point[1]:
                    x = int(sub_point[0] * self.char_size)
                    y = int(sub_point[1] * self.char_size)
                    _loose_point_map[sub_key].append([x, y])
                elif sub_point[0] < self.center_point[0] \
                        and sub_point[1] > self.center_point[1]:
                    x = int(770 - (770 - sub_point[0]) * self.char_size)
                    y = int(sub_point[1] * self.char_size)
                    _loose_point_map[sub_key].append([x, y])
                elif sub_point[0] < self.center_point[0] \
                        and sub_point[1] == self.center_point[1]:
                    x = int(770 - (770 - sub_point[0]) * self.char_size)
                    y = self.center_point[1]
                    _loose_point_map[sub_key].append([x, y])
                elif sub_point[0] > self.center_point[0] \
                        and sub_point[1] == self.center_point[1]:
                    x = int(sub_point[0] * self.char_size)
                    y = self.center_point[1]
                    _loose_point_map[sub_key].append([x, y])
                elif sub_point[0] == self.center_point[0] \
                        and sub_point[1] < self.center_point[1]:
                    x = self.center_point[0]
                    y = int(690 - (690 - sub_point[1]) * self.char_size)
                    _loose_point_map[sub_key].append([x, y])
                elif sub_point[0] == self.center_point[0] \
                        and sub_point[1] > self.center_point[1]:
                    x = self.center_point[0]
                    y = int(sub_point[1] * self.char_size)
                    _loose_point_map[sub_key].append([x, y])
                else:
                    x = self.center_point[0]
                    y = self.center_point[1]
                    _loose_point_map[sub_key].append([x, y])

        self.all_point_map["press_point_map"] = \
            _press_point_map

        self.all_point_map["loose_point_map"] = \
            _loose_point_map

        self.all_point_map["practise_press_point_map"] = \
            _practise_press_point_map

        self.all_point_map["practise_loose_point_map"] = \
            _practise_loose_point_map

    def save_work(self):
        try:
            filename = QFileDialog.getSaveFileName(self, '保存作品',
                                                   self.save_dir)
            for press_point_key in self.all_point_map["press_point_map"].keys():
                press_point_list = \
                    self.all_point_map["press_point_map"][press_point_key]
                if not press_point_list:
                    continue
                practise_press_point_list = []
                point_count = 0
                for sub_press_point in press_point_list:
                    if 0 == press_point_list.index(sub_press_point):
                        practise_press_point_list.append(sub_press_point)

                    if 20 == point_count:
                        practise_press_point_list.append(sub_press_point)
                        point_count = 0

                    point_count += 1
                if practise_press_point_list[-1] != press_point_list[-1]:
                    practise_press_point_list.append(press_point_list[-1])

                self.all_point_map["practise_press_point_map"][press_point_key] = \
                    practise_press_point_list

            for loose_point_key in self.all_point_map["loose_point_map"].keys():
                loose_point_list = \
                    self.all_point_map["loose_point_map"][loose_point_key]
                if not loose_point_list:
                    continue
                practise_loose_point_list = []
                point_count = 0
                for sub_loose_point in loose_point_list:
                    # 取第一个点
                    if 0 == loose_point_list.index(sub_loose_point):
                        practise_loose_point_list.append(sub_loose_point)
                    # 每隔四个点取一个点
                    if 20 == point_count:
                        practise_loose_point_list.append(sub_loose_point)
                        point_count = 0
                    point_count += 1
                if practise_loose_point_list[-1] != loose_point_list[-1]:
                    practise_loose_point_list.append(loose_point_list[-1])

                self.all_point_map[
                    "practise_loose_point_map"][loose_point_key] = \
                    practise_loose_point_list

            # 放大尝试
            # self.change_size_from_src_point()

            if not filename[0].endswith(".json"):
                with open(filename[0] + ".json", 'w') as f:
                    f.write(json.dumps(self.all_point_map))
            else:
                with open(filename[0], 'w') as f:
                    f.write(json.dumps(self.all_point_map))

            self.__board.fill(Qt.white)  # 用白色填充画板
            self.all_point_map = {
                "press_point_map": {},
                "loose_point_map": {},
                "practise_press_point_map": {},
                "practise_loose_point_map": {},
            }
            self.painting = False
            self.start_write = False
            self.frame.update()
        except Exception as e:
            logging.exception(e)

    def delete_last_trail(self):
        try:
            self.painting = False
            self.start_write = False

            press_point_map_keys = list(
                self.all_point_map["press_point_map"].keys())
            press_point_map_keys.sort()
            press_last_trail_point_key = \
                press_point_map_keys[-1]
            press_last_trail_point_list = \
                self.all_point_map["press_point_map"][
                    press_last_trail_point_key]
            tmp_last_point = press_last_trail_point_list[-1]
            self.painter.begin(self.__board)
            self.painter.setPen(
                QPen(QtCore.Qt.white, self.value + 2, Qt.SolidLine)
            )
            for sub_point in self.loose_point_list:
                current_point = sub_point
                self.painter.drawLine(
                    tmp_last_point[0], tmp_last_point[1],
                    current_point[0], current_point[1]
                )
                tmp_last_point = current_point
            self.painter.end()
            self.loose_point_list = []
            self.frame.update()
        except Exception as e:
            logging.exception(e)

    def truncate_board(self):
        self.__board.fill(Qt.white)  # 用白色填充画板
        self.all_point_map = {
            "press_point_map": {},
            "loose_point_map": {},
            "practise_press_point_map": {},
            "practise_loose_point_map": {},
        }
        self.painting = False
        self.start_write = False
        self.is_press = False
        self.frame.update()

    def press_pen_color_change(self):
        self.press_color = QtWidgets.QColorDialog.getColor(
            QtCore.Qt.blue)
        self.press_color_change_frame.setPalette(QtGui.QPalette(self.press_color))
        self.press_value = self.spinBox.value()  # 线宽由SpinBox控件控制

    def loose_pen_color_change(self):
        self.loose_color = QtWidgets.QColorDialog.getColor(
            QtCore.Qt.blue)
        self.loose_color_change_frame.setPalette(QtGui.QPalette(self.loose_color))
        self.loose_value = self.spinBox.value()  # 线宽由SpinBox控件控制

    def start_input(self):
        self.painting = True

    def paintEvent(self, event):
        self.painter.begin(self)
        self.painter.drawPixmap(20, 10, self.__board)
        self.painter.end()

    def mouseMoveEvent(self, mouseEvent):
        try:
            self.point_current = mouseEvent.pos()
            if self.painting and self.start_write:
                if not self.is_press:
                    self.loose_point_list.append(
                        [self.point_current.x(), self.point_current.y()]
                    )
                else:
                    self.press_point_list.append(
                        [self.point_current.x(), self.point_current.y()]
                    )
                self.painter.begin(self.__board)
                # if self.eraser_checkBox.isChecked():  # 是否使用橡皮擦
                #     self.painter.setPen(
                #         QPen(QtCore.Qt.white, 20, Qt.SolidLine)
                #     )
                # else:
                self.painter.setPen(
                    QPen(self.color, self.value, Qt.SolidLine)
                )
                self.painter.drawLine(
                    self.point_last,
                    self.point_current
                )
                self.painter.end()
            self.point_last = self.point_current
            self.frame.update()
        except Exception as e:
            logging.exception(e)

    def mouseReleaseEvent(self, event):
        self.color = self.loose_color
        self.value = self.loose_value
        self.all_point_map["press_point_map"][str(time.time())] = \
            self.press_point_list
        self.press_point_list = []
        self.is_press = False

    def mousePressEvent(self, event):
        if not self.start_write and self.painting:
            self.press_point_list = []
            self.start_write = True
        self.color = self.press_color
        self.value = self.press_value
        self.all_point_map["loose_point_map"][str(time.time())] = \
            self.loose_point_list
        self.loose_point_list = []
        self.is_press = True
